<Box sx={{ flexGrow: 1, display: { xs: "flex", md: "none" } }}>
            <IconButton
              size="large"
              aria-label="account of current user"
              aria-controls="menu-appbar"
              aria-haspopup="true"
              onClick={handleOpenNavMenu}
              color="inherit"
            >
              <GiHamburgerMenu />
            </IconButton>
            <Menu
              id="menu-appbar"
              anchorEl={anchorElNav}
              anchorOrigin={{
                vertical: "bottom",
                horizontal: "left",
              }}
              keepMounted
              transformOrigin={{
                vertical: "top",
                horizontal: "left",
              }}
              open={Boolean(anchorElNav)}
              onClose={handleCloseNavMenu}
              sx={{
                display: { xs: "block", md: "none" },
              }}
            >
              <MenuItem key="Home" onClick={handleCloseNavMenu}>
                <Typography
                  sx={{
                    color: "black",
                  }}
                  textAlign="center"
                >
                  Home
                </Typography>
              </MenuItem>
              <MenuItem key="Shop" onClick={handleCloseNavMenu}>
                <Typography
                  sx={{
                    color: "black",
                  }}
                  textAlign="center"
                >
                  Shop
                </Typography>
              </MenuItem>
              <MenuItem key="Blog" onClick={handleCloseNavMenu}>
                <Typography
                  sx={{
                    color: "black",
                  }}
                  textAlign="center"
                >
                  Blog
                </Typography>
              </MenuItem>
            </Menu>
          </Box>
          <Typography
            variant="h6"
            noWrap
            component="div"
            sx={{ flexGrow: 1, display: { xs: "flex", md: "none" } }}
          >
            LOGO
          </Typography>


<Grid conatiner>
            {ProductSize.map((size, index) => (
              <Grid item lg={4} md={4} xs={4} sm={4} key={index}>
                <Card
                  sx={{
                    borderRadius: "15px",
                    width: "60px",
                    height: "40px",
                    boxShadow:
                      sizeValue === size
                        ? "none"
                        : "0px 0px 18px 0px #fff inset",
                    backgroundColor: sizeValue === size ? "#FDC20C" : "#ffe0b2",
                    justifyContent: "center",
                    alignItems: "center",
                    display: "flex",
                  }}
                  onClick={() => setSizeValue(size)}
                >
                  <Typography
                    fontWeight="bold"
                    fontSize="1.2rem"
                    fontFamily="Ubuntu"
                    variant="subtitle1"
                    sx={{
                      cursor: "pointer",
                    }}
                  >
                    {size}
                  </Typography>
                </Card>
              </Grid>
            ))}
          </Grid>

          <Typography
            variant="h6"
            noWrap
            component="div"
            sx={{ mr: 2, display: { xs: "none", md: "flex" } }}
          >
            LOGO
          </Typography>

          <Box sx={{ display: "flex" }}>
            <Button
              key="Home"
              onClick={handleCloseNavMenu}
              sx={{ my: 2, color: "black", display: "block" }}
            >
              Home
            </Button>
            <Button
              key="Shop"
              onClick={handleCloseNavMenu}
              sx={{ my: 2, color: "black", display: "block" }}
            >
              Shop
            </Button>
            <Button
              key="Blog"
              onClick={handleCloseNavMenu}
              sx={{ my: 2, color: "black", display: "block" }}
            >
              Blog
            </Button>
          </Box>

          <Box>
            <Tooltip title="Open settings">
              <IconButton onClick={handleOpenUserMenu} sx={{ p: 0 }}>
                <Avatar alt="Remy Sharp" src="/static/images/avatar/2.jpg" />
              </IconButton>
            </Tooltip>
            <Menu
              sx={{ mt: "45px" }}
              id="menu-appbar"
              anchorEl={anchorElUser}
              anchorOrigin={{
                vertical: "top",
                horizontal: "right",
              }}
              keepMounted
              transformOrigin={{
                vertical: "top",
                horizontal: "right",
              }}
              open={Boolean(anchorElUser)}
              onClose={handleCloseUserMenu}
            >
              {settings.map((setting) => (
                <MenuItem key={setting} onClick={handleCloseUserMenu}>
                  <Typography textAlign="center">{setting}</Typography>
                </MenuItem>
              ))}
            </Menu>
          </Box>




          <Grid container spacing={2}>
              <Grid item xs={12} sm={6}>
                <TextField name="firstName" label="First Name" />
              </Grid>
              <Grid item xs={12} sm={6}>
                <TextField name="lastName" label="Last Name" />
              </Grid>
              <Grid item xs={12}></Grid>
              <Grid item xs={12}></Grid>
              <Grid item xs={12}>
                <FormControlLabel
                  sx={{
                    color: "#000",
                  }}
                  control={
                    <Checkbox value="allowExtraEmails" color="primary" />
                  }
                  label="I agree to the terms and condition."
                />
              </Grid>
            </Grid>




            try {
          console.log("Im Outside", new_user.email);
          users.map((user) => {
            console.log("Im Inside1", user.email);
            console.log("Im Inside2", new_user.email);
            if (user.email === new_user.email) {
              console.log("User already exists");
              navigate("/");
              return;
            } else {
              console.log("Im Inside3", new_user.email);
              addDoc(collection(firebase, "Users"), {
                uid: new_user.uid,
                email: new_user.email,
                displayName: new_user.displayName,
                photoURL: new_user.photoURL,
                createdAt: serverTimestamp(),
              });
              localStorage.setItem("user", JSON.stringify(user));
              console.log(user);
              navigate("/");
              return;
            }
          });
        } catch (error) {
          console.log(error);
        }